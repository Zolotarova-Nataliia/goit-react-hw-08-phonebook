{"version":3,"file":"static/js/511.413762bd.chunk.js","mappings":"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","sources":["components/Button.jsx","redux/contacts/contactsSelectors.js","components/Contacts.jsx","components/Filter.jsx","components/Form.jsx","views/ContactsView.jsx"],"sourcesContent":["import { FormBtn } from \"./Phonebook.styled\";\r\nimport Spinner from \"react-spinkit\";\r\nimport { Fragment } from \"react\";\r\n\r\nexport const Button = ({ loading, disabled, children, ...props }) => {\r\n  return (\r\n    <FormBtn {...props} disabled={disabled || loading}>\r\n      {loading && <Spinner fadeIn=\"none\" name=\"wave\" color=\"#e98a25\" />}\r\n      {!loading && <Fragment>{children}</Fragment>}\r\n    </FormBtn>\r\n  );\r\n};\r\n","export const getContactsList = (state) => {\r\n  return {\r\n    contactList: state.contacts.contactsList,\r\n    isLoading: state.contacts.isLoading,\r\n  };\r\n};\r\n\r\nexport const getIsAdding = (state) => state.contacts.isAdding;\r\n\r\nexport const getIsDeleting = (state) => state.contacts.isDeleting;\r\n\r\nexport const getFilter = (state) => state.contacts.filter;\r\n","import { React } from \"react\";\r\nimport Spinner from \"react-spinkit\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  FormText,\r\n  FormList,\r\n  FormListItem,\r\n  SpinnerWrap,\r\n} from \"./Phonebook.styled\";\r\nimport { Button } from \"./Button\";\r\nimport * as selectors from \"../redux/contacts/contactsSelectors\";\r\nimport { deleteContact } from \"../redux/contacts/contactsOperations\";\r\n\r\nconst Contacts = () => {\r\n  const { contactList, isLoading } = useSelector(selectors.getContactsList);\r\n  const filter = useSelector(selectors.getFilter);\r\n  const isDeleting = useSelector(selectors.getIsDeleting);\r\n  const dispatch = useDispatch();\r\n  const filteredContacts = contactList.filter((contact) =>\r\n    contact.name.toLowerCase().includes(filter.toLowerCase())\r\n  );\r\n  if (isLoading) {\r\n    return (\r\n      <SpinnerWrap>\r\n        <Spinner name=\"ball-spin-fade-loader\" color=\"#e98a25\" />\r\n      </SpinnerWrap>\r\n    );\r\n  }\r\n  if (filteredContacts.length === 0) {\r\n    <FormText>There are no contacts</FormText>;\r\n  }\r\n\r\n  return (\r\n    <FormList>\r\n      {filteredContacts.map((contact) => (\r\n        <FormListItem key={contact.name}>\r\n          <FormText>{contact.name}:</FormText>\r\n          <FormText>{contact.number}</FormText>\r\n          <Button\r\n            loading={isDeleting[contact.id]}\r\n            onClick={() => dispatch(deleteContact(contact.id))}\r\n          >\r\n            Delete\r\n          </Button>\r\n        </FormListItem>\r\n      ))}\r\n    </FormList>\r\n  );\r\n};\r\n\r\nexport default Contacts;\r\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { FormLabel, FormInput } from \"./Phonebook.styled\";\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  return (\r\n    <Fragment>\r\n      <FormLabel>\r\n        Find contacts by name\r\n        <FormInput\r\n          type=\"text\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n          required\r\n          value={value}\r\n          onChange={onChange}\r\n        />\r\n      </FormLabel>\r\n    </Fragment>\r\n  );\r\n};\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\nexport default Filter;\r\n","import { Fragment, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { StyledForm, FormLabel, FormInput, FormBtn } from \"./Phonebook.styled\";\r\n\r\nexport default function Form({ onSubmit }) {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    switch (name) {\r\n      case \"name\":\r\n        setName(value);\r\n        break;\r\n      case \"number\":\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    onSubmit({\r\n      name: name,\r\n      number: number,\r\n    });\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setNumber(\"\");\r\n    setName(\"\");\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <StyledForm onSubmit={handleSubmit}>\r\n        <FormLabel>\r\n          Name\r\n          <FormInput\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n            required\r\n            value={name}\r\n            onChange={handleChange}\r\n          />\r\n        </FormLabel>\r\n        <FormLabel>\r\n          Number\r\n          <FormInput\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n            required\r\n            value={number}\r\n            onChange={handleChange}\r\n          />\r\n        </FormLabel>\r\n        <FormBtn type=\"submit\">Add contact</FormBtn>\r\n      </StyledForm>\r\n    </Fragment>\r\n  );\r\n}\r\nForm.propTypes = {\r\n  handleChange: PropTypes.func,\r\n  handleSubmit: PropTypes.func,\r\n};\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { store } from \"../redux/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport { Contacts, Filter, Form } from \"../components\";\r\nimport { Title, FormSubtitle } from \"../components/Phonebook.styled\";\r\nimport { addContact, getContacts } from \"../redux/contacts/contactsOperations\";\r\nimport { getContactsList } from \"../redux/contacts/contactsSelectors\";\r\nimport { getFilter } from \"../redux/contacts/contactsSelectors\";\r\nimport { changeContactFilter } from \"../redux/contacts/contactsActions\";\r\n\r\nexport default function ContactsView() {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getContacts());\r\n  }, [dispatch]);\r\n\r\n  const { contactList } = useSelector(getContactsList);\r\n  const filter = useSelector(getFilter);\r\n  const formSubmitHandler = (data) => {\r\n    const { name, number } = data;\r\n    const addedContact = contactList.find(\r\n      (contact) => contact.name.toLowerCase() === name.toLowerCase()\r\n    );\r\n    if (addedContact) {\r\n      alert(`${name} is already in contacts.`);\r\n      return;\r\n    }\r\n    dispatch(addContact({ name, number }));\r\n    addContact(data);\r\n  };\r\n\r\n  const filterHandler = (event) => {\r\n    dispatch(changeContactFilter(event.currentTarget.value));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Provider store={store}>\r\n        <Title>Phonebook</Title>\r\n        <Form onSubmit={formSubmitHandler}></Form>\r\n        <FormSubtitle>Contacts</FormSubtitle>\r\n        <Filter value={filter} onChange={filterHandler}></Filter>\r\n        <Contacts />\r\n      </Provider>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["Button","loading","disabled","children","props","fadeIn","name","color","Fragment","getContactsList","state","contactList","contacts","contactsList","isLoading","getIsDeleting","isDeleting","getFilter","filter","useSelector","selectors","dispatch","useDispatch","filteredContacts","contact","toLowerCase","includes","length","map","number","id","onClick","deleteContact","value","onChange","type","pattern","title","required","Form","onSubmit","useState","setName","setNumber","handleChange","event","target","reset","preventDefault","ContactsView","useEffect","getContacts","store","data","find","alert","addContact","changeContactFilter","currentTarget"],"sourceRoot":""}